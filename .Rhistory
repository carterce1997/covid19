mutate(Region = fct_reorder(Region, PercentRunthrough)) %>%
ggplot(aes(x = PercentRunthrough, y = Region)) +
stat_pointintervalh() +
xlim(0, 1) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Percent Runthrough')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, s)) %>%
ggplot(aes(x = s, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Curve Flatness')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Total Cases Over\nWhole Couse of Outbreak')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
scale_x_log10() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Total Cases Over\nWhole Couse of Outbreak')
total_cases <-
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
scale_x_log10() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Total Cases Over\nWhole Couse of Outbreak')
flatness <-
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, s)) %>%
ggplot(aes(x = s, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Curve Flatness')
inflection <-
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, m)) %>%
ggplot(aes(x = m, y = Region)) +
stat_pointintervalh() +
geom_vline(xintercept = 0) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Days Until Inflection')
runthrough <-
trace %>%
ungroup() %>%
mutate(PercentRunthrough = 1 / (1 + exp(m / s))) %>%
mutate(Region = fct_reorder(Region, PercentRunthrough)) %>%
ggplot(aes(x = PercentRunthrough, y = Region)) +
stat_pointintervalh() +
xlim(0, 1) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Percent Runthrough')
inflection + runthrough + total_cases + flatness
inflection + runthrough + total_cases + flatness + plot_layout(nrow = 1)
runthrough <-
trace %>%
ungroup() %>%
mutate(PercentRunthrough = 1 / (1 + exp(m / s))) %>%
mutate(Region = fct_reorder(Region, -PercentRunthrough)) %>%
ggplot(aes(x = PercentRunthrough, y = Region)) +
stat_pointintervalh() +
xlim(0, 1) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Percent Runthrough')
inflection + runthrough + total_cases + flatness + plot_layout(nrow = 1)
inflection + total_cases + flatness + plot_layout(nrow = 1)
source('C:/Users/carte/Desktop/covid19/hierarchical_cumulative_cases_model.R', echo=TRUE)
get_covid_data <- function() {
content_url <-
'http://en.wikipedia.org/wiki/Template:2019-20_coronavirus_pandemic_data/United_States_medical_cases'
content <-
read_html(content_url)
counts_raw <-
content %>%
html_nodes('table') %>%
.[1] %>%
html_table(fill = TRUE, header = FALSE) %>%
as.data.frame()
colnames(counts_raw) <-
counts_raw[2,]
counts_raw <-
counts_raw[-1:-2,-ncol(counts_raw):-(ncol(counts_raw) - 6)]
counts <-
counts_raw %>%
filter(nchar(Date) <= 10) %>%
mutate(
Date = mdy(paste(Date, ', 2020'))
) %>%
drop_na(Date) %>%
pivot_longer(AK:PR, names_to = 'Region', values_to = 'n') %>%
mutate(
n = as.numeric(n),
n = replace_na(n, 0)
)
return(counts)
}
covid_data <-
get_covid_data()
covid_data %>%
arrange(Date) %>%
group_by(Region) %>%
mutate(cumu_n = cumsum(n)) %>%
ungroup() %>%
ggplot() +
geom_path(aes(x = cumu_n, y = n, group = Region)) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~ Region) +
theme_minimal()
library(tidybayes)
library(rvest)
library(tidyverse)
library(lubridate)
phase_space_model <-
stan_model('stan/phase_space_model.stan')
get_covid_data <- function() {
content_url <-
'http://en.wikipedia.org/wiki/Template:2019-20_coronavirus_pandemic_data/United_States_medical_cases'
content <-
read_html(content_url)
counts_raw <-
content %>%
html_nodes('table') %>%
.[1] %>%
html_table(fill = TRUE, header = FALSE) %>%
as.data.frame()
colnames(counts_raw) <-
counts_raw[2,]
counts_raw <-
counts_raw[-1:-2,-ncol(counts_raw):-(ncol(counts_raw) - 6)]
counts <-
counts_raw %>%
filter(nchar(Date) <= 10) %>%
mutate(
Date = mdy(paste(Date, ', 2020'))
) %>%
drop_na(Date) %>%
pivot_longer(AK:PR, names_to = 'Region', values_to = 'n') %>%
mutate(
n = as.numeric(n),
n = replace_na(n, 0)
)
return(counts)
}
covid_data <-
get_covid_data()
covid_data %>%
arrange(Date) %>%
group_by(Region) %>%
mutate(cumu_n = cumsum(n)) %>%
ungroup() %>%
ggplot() +
geom_path(aes(x = cumu_n, y = n, group = Region)) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~ Region) +
theme_minimal()
rstan:::rstudio_stanc("stan/phase_space_model.stan")
rstan:::rstudio_stanc("stan/phase_space_model.stan")
rstan:::rstudio_stanc("stan/phase_space_model.stan")
rstan:::rstudio_stanc("stan/phase_space_model.stan")
source('C:/Users/carte/Desktop/covid19/phase_space_model.R', echo=TRUE)
trace$inv_A
source('C:/Users/carte/Desktop/covid19/phase_space_model.R', echo=TRUE)
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
library(shiny)
library(tidyverse)
library(lubridate)
library(rvest)
content_url <-
'http://en.wikipedia.org/wiki/Template:2019%E2%80%9320_coronavirus_pandemic_data/United_States_medical_cases'
content <-
read_html(content_url)
counts_raw <-
content %>%
html_nodes('table') %>%
.[2] %>%
html_table(fill = TRUE, header = FALSE) %>%
as.data.frame()
colnames(counts_raw) <-
counts_raw[2,]
counts_raw <-
counts_raw[-1:-2,-ncol(counts_raw):-(ncol(counts_raw) - 6)]
counts <-
counts_raw %>%
filter(nchar(Date) <= 10) %>%
mutate(
Date = mdy(paste(Date, ', 2020'))
) %>%
drop_na(Date) %>%
pivot_longer(AK:PA, names_to = 'Region', values_to = 'n') %>%
mutate(
n = as.numeric(n),
n = replace_na(n, 0)
)
total_counts <-
counts %>%
group_by(Date) %>%
summarize(n = sum(n)) %>%
ungroup() %>%
mutate(Region = 'USA')
return(rbind(counts, total_counts))
counts <-
counts_raw %>%
filter(nchar(Date) <= 10) %>%
mutate(
Date = mdy(paste(Date, ', 2020'))
) %>%
drop_na(Date) %>%
pivot_longer(AK:RI, names_to = 'Region', values_to = 'n') %>%
mutate(
n = as.numeric(n),
n = replace_na(n, 0)
)
total_counts <-
counts %>%
group_by(Date) %>%
summarize(n = sum(n)) %>%
ungroup() %>%
mutate(Region = 'USA')
return(rbind(counts, total_counts))
rbind(counts, total_counts)
source('C:/Users/carte/Desktop/covid19/phase_space_model.R', echo=TRUE)
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
install.packages('vroom')
runApp('app2')
results <-
vroom::vroom('https://covidtracking.com/api/states.csv')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
covid_data %>%
filter(state == 'NY') %>%
filter(positive > 50, positiveIncrease > 0) %>%
mutate(growth_factor = positiveIncrease / lag(positiveIncrease))
get_covid_data <- function() {
results <-
vroom::vroom('http://covidtracking.com/api/states/daily.csv') %>%
mutate(date = ymd(date)) %>%
replace(is.na(.), 0)
return(results)
}
covid_data <-
get_covid_data()
covid_data %>%
filter(state == 'NY') %>%
filter(positive > 50, positiveIncrease > 0) %>%
mutate(growth_factor = positiveIncrease / lag(positiveIncrease))
covid_data %>%
filter(state == 'NY') %>%
filter(positive > 50, positiveIncrease > 0) %>%
arrange(date) %>%
mutate(growth_factor = positiveIncrease / lag(positiveIncrease))
covid_data %>%
filter(state == 'NY') %>%
filter(positive > 50, positiveIncrease > 0) %>%
arrange(date) %>%
mutate(growth_factor = positiveIncrease / lag(positiveIncrease)) %>%
select(growth_factor)
runApp('app2')
runApp('app2')
runApp('app2')
library(rstanarm)
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
total_counts <-
results %>%
group_by(date) %>%
summarize_all(function(x) if(class(x) == 'numeric') sum(x) else NA) %>%
ungroup() %>%
mutate(state = 'USA')
results <-
vroom::vroom('https://covidtracking.com/api/states/daily.csv') %>%
mutate(date = ymd(date)) %>%
replace(is.na(.), 0)
total_counts <-
results %>%
group_by(date) %>%
summarize_all(function(x) if(class(x) == 'numeric') sum(x) else NA) %>%
ungroup() %>%
mutate(state = 'USA')
total_counts
rbind(results, total_counts)
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
source('C:/Users/carte/Desktop/covid19/phase_space_model.R', echo=TRUE)
source('C:/Users/carte/Desktop/covid19/phase_space_model2.R', echo=TRUE)
source('C:/Users/carte/Desktop/covid19/phase_space_model2.R', echo=TRUE)
model <-
stan_model('stan/hierarchical_richardson_phase_space_model.stan')
get_covid_data <- function() {
content_url <-
'http://en.wikipedia.org/wiki/Template:2019-20_coronavirus_pandemic_data/United_States_medical_cases'
content <-
read_html(content_url)
counts_raw <-
content %>%
html_nodes('table') %>%
.[1] %>%
html_table(fill = TRUE, header = FALSE) %>%
as.data.frame()
colnames(counts_raw) <-
counts_raw[2,]
counts_raw <-
counts_raw[-1:-2,-ncol(counts_raw):-(ncol(counts_raw) - 6)]
counts <-
counts_raw %>%
filter(nchar(Date) <= 10) %>%
mutate(
Date = mdy(paste(Date, ', 2020'))
) %>%
drop_na(Date) %>%
pivot_longer(AK:PR, names_to = 'Region', values_to = 'n') %>%
mutate(
n = as.numeric(n),
n = replace_na(n, 0)
)
total_counts <-
counts %>%
group_by(Date) %>%
summarize(n = sum(n)) %>%
ungroup() %>%
mutate(Region = 'USA')
return(rbind(counts, total_counts))
}
covid_data <-
get_covid_data()
stan_df <-
covid_data %>%
arrange(Date) %>%
group_by(Region) %>%
mutate(cumu_n = cumsum(n)) %>%
filter(!(Date == max(Date) & n == 0)) %>%
ungroup() %>%
filter(
cumu_n >= 1e1
) %>%
select(
state,
y = n,
cumu_y = cumu_n
)
stan_df <-
covid_data %>%
arrange(Date) %>%
group_by(Region) %>%
mutate(cumu_n = cumsum(n)) %>%
filter(!(Date == max(Date) & n == 0)) %>%
ungroup() %>%
filter(
cumu_n >= 1e1
) %>%
select(
Region,
y = n,
cumu_y = cumu_n
)
stan_data <-
compose_data(stan_df)
covid_data <-
readr::read_csv('https://coronadatascraper.com/#data.csv')
covid_data <-
vroom::vroom('https://coronadatascraper.com/#data.csv')
covid_data <-
vroom::vroom('https://coronadatascraper.com/data.csv')
korea <-
covid_data %>%
filter(
country == 'South Korea'
)
covid_data$country
covid_data$country %>% unique()
covid_data$country %>% unique() %>% sort()
korea <-
covid_data %>%
filter(
country == 'KOR'
)
covid_data <-
vroom::vroom('https://coronadatascraper.com/timeseries.csv')
korea <-
covid_data %>%
filter(
country == 'KOR'
)
korea %>%
group_by(date) %>%
summarize_all(function(x) if ('numeric' %in% class(x)) sum(x) else NA)
korea %>%
group_by(date) %>%
summarize_all(function(x) if ('numeric' %in% class(x)) sum(x, na.rm = TRUE) else NA)
korea %>%
group_by(date) %>%
summarize_all(function(x) if ('numeric' %in% class(x)) sum(x, na.rm = TRUE) else NA) %>%
ungroup()
korea_summary <-
korea %>%
group_by(date) %>%
summarize_all(function(x) if ('numeric' %in% class(x)) sum(x, na.rm = TRUE) else NA) %>%
ungroup()
korea %>%
ggplot() +
geom_line(aes(x = date, y = deaths))
theme_set(theme_minimal)
library(tidyverse)
theme_set(theme_minimal())
korea %>%
ggplot() +
geom_line(aes(x = date, y = deaths))
korea %>%
ggplot() +
geom_line(aes(x = date, y = cases))
korea_summary <-
korea %>%
group_by(date) %>%
summarize_all(function(x) if ('numeric' %in% class(x)) sum(x, na.rm = TRUE) else NA) %>%
ungroup() %>%
filter(date != max(date))
korea %>%
ggplot() +
geom_line(aes(x = date, y = cases))
korea_summary %>%
ggplot() +
geom_line(aes(x = date, y = cases))
korea_summary <-
korea %>%
group_by(date) %>%
summarize_all(function(x) if ('numeric' %in% class(x)) sum(x, na.rm = TRUE) else NA) %>%
ungroup()
korea_summary %>%
ggplot() +
geom_line(aes(x = date, y = cases))
korea_summary %>%
ggplot() +
geom_line(aes(x = date, y = deaths))
korea_summary$tested
korea_summary %>%
ggplot() +
geom_line(aes(x = date, y = tested))
korea_summary$aggregate
