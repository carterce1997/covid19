coord_flip() +
ylim(0, max(trace$A)) +
ggtitle('Total Cases Estimate')
curves +
total_cases_estimate +
inflection_estimate +
plot_spacer() +
plot_layout(ncol = 2, widths = c(3, 1, 3, 1))
total_cases_estimate <-
trace %>%
ggplot() +
geom_histogram(aes(x = A), bins = 50) +
geom_vline(aes(xintercept = median(A))) +
ylim(0, max(trace$A)) +
coord_flip() +
ggtitle('Total Cases Estimate')
curves +
total_cases_estimate +
inflection_estimate +
plot_spacer() +
plot_layout(ncol = 2, widths = c(3, 1, 3, 1))
total_cases_estimate <-
trace %>%
ggplot() +
geom_histogram(aes(x = A), bins = 50) +
geom_vline(aes(xintercept = median(A))) +
xlim(0, max(trace$A)) +
coord_flip() +
ggtitle('Total Cases Estimate')
curves +
total_cases_estimate +
inflection_estimate +
plot_spacer() +
plot_layout(ncol = 2, widths = c(3, 1, 3, 1))
source('C:/Users/carte/Desktop/covid19/cumulative_cases_model.R', echo=TRUE)
trace <-
spread_draws(fit, A, m, s, phi) %>%
filter(A <= quantile(A, .9))
predictions <-
merge(
trace,
data.frame(expand.grid(t = seq(-14, 14)))
) %>%
mutate(
mu_pred = A  / (1 + exp(-(t - m) / s))
)
curves <-
ggplot() +
geom_line(aes(x = t, y = mu_pred, group = .draw), data = predictions, alpha = .01) +
geom_line(aes(x = DaysOut, y = cumu_n), data = ny_covid_data, stat = 'identity', color = 'red', size = 1) +
xlim(-14, 14) +
ylim(0, max(trace$A)) +
ggtitle('Cumulative Cases Prediction')
p <- .5
inflection_estimate <-
trace %>%
ggplot() +
geom_histogram(aes(x = m + s * log(p / (1 - p))), bins = 100) +
geom_vline(aes(xintercept = median(m + s * log(p / (1 - p))))) +
xlim(-14, 14) +
ggtitle('Inflection Point Estimate')
total_cases_estimate <-
trace %>%
ggplot() +
geom_histogram(aes(x = A), bins = 50) +
geom_vline(aes(xintercept = median(A))) +
xlim(0, max(trace$A)) +
coord_flip() +
ggtitle('Total Cases Estimate')
curves +
total_cases_estimate +
inflection_estimate +
plot_spacer() +
plot_layout(ncol = 2, widths = c(3, 1, 3, 1))
source('C:/Users/carte/Desktop/covid19/cumulative_cases_model.R', echo=TRUE)
source('C:/Users/carte/Desktop/covid19/cumulative_cases_model.R', echo=TRUE)
source('C:/Users/carte/Desktop/covid19/cumulative_cases_model.R', echo=TRUE)
source('C:/Users/carte/Desktop/covid19/cumulative_cases_model.R', echo=TRUE)
source('C:/Users/carte/Desktop/covid19/cumulative_cases_model.R', echo=TRUE)
source('C:/Users/carte/Desktop/covid19/cumulative_cases_model.R', echo=TRUE)
curves +
total_cases_estimate +
inflection_estimate +
plot_spacer() +
plot_layout(ncol = 2, widths = c(3, 1, 3, 1))
source('C:/Users/carte/Desktop/covid19/cumulative_cases_model.R', echo=TRUE)
curves +
total_cases_estimate +
inflection_estimate +
plot_spacer() +
plot_layout(ncol = 2, widths = c(3, 1, 3, 1))
source('C:/Users/carte/Desktop/covid19/hierarchical_cumulative_cases_model.R', echo=TRUE)
trace <-
fit %>%
recover_types()
trace <-
fit %>%
recover_types() %>%
gather_draws(fit, A[Region], m[Region], s[Region], phi)
trace <-
fit %>%
gather_draws(fit, A[Region], m[Region], s[Region], phi) %>%
recover_types()
trace <-
fit %>%
spread_draws(fit, A[Region], m[Region], s[Region], phi) %>%
recover_types()
trace <-
fit %>%
spread_draws(fit, A[Region], m[Region], s[Region], phi)
trace <-
fit %>%
spread_draws(A[Region], m[Region], s[Region], phi) %>%
recover_types()
View(trace)
trace <-
fit %>%
recover_types() %>%
spread_draws(A[Region], m[Region], s[Region], phi)
trace <-
fit %>%
recover_types(clean_covid_data) %>%
spread_draws(A[Region], m[Region], s[Region], phi)
View(trace)
trace %>%
ggplot(aes(x = m, y = Region)) +
stat_eyeh()
trace %>%
mutate(Region = fct_reorder(Region, m)) %>%
ggplot(aes(x = m, y = Region)) +
stat_eyeh()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, m)) %>%
ggplot(aes(x = m, y = Region)) +
stat_eyeh()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, m)) %>%
ggplot(aes(x = m, y = Region)) +
stat_pointintervalh()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, m)) %>%
ggplot(aes(x = m, y = Region)) +
stat_pointintervalh() +
geom_vline(xintercept = 0) +
theme_minimal()
clean_covid_data <-
covid_data %>%
arrange(Date) %>%
group_by(Region) %>%
mutate(
DaysOut = as.numeric(difftime(Date, Sys.Date(), units = 'days')),
cumu_n = cumsum(n)
) %>%
ungroup() %>%
filter(
DaysOut >= -14
!(Date == max(Date) & n == 0)
)
clean_covid_data <-
covid_data %>%
arrange(Date) %>%
group_by(Region) %>%
mutate(
DaysOut = as.numeric(difftime(Date, Sys.Date(), units = 'days')),
cumu_n = cumsum(n)
) %>%
ungroup() %>%
filter(
DaysOut >= -14,
!(Date == max(Date) & n == 0)
)
stan_data <-
clean_covid_data %>%
compose_data()
fit <-
sampling(hierarchical_cumulative_model, data = stan_data, chains = 1, iter = 2000)
trace <-
fit %>%
recover_types(clean_covid_data) %>%
spread_draws(A[Region], m[Region], s[Region], phi)
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, m)) %>%
ggplot(aes(x = m, y = Region)) +
stat_pointintervalh() +
geom_vline(xintercept = 0) +
theme_minimal()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
geom_vline(xintercept = 0) +
theme_minimal()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
scale_x_log10() +
theme_minimal()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
theme_minimal()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, s)) %>%
ggplot(aes(x = s, y = Region)) +
stat_pointintervalh() +
theme_minimal()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A / s)) %>%
ggplot(aes(x = A / s, y = Region)) +
stat_pointintervalh() +
theme_minimal()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, 2 / s)) %>%
ggplot(aes(x = 1 / s, y = Region)) +
stat_pointintervalh() +
theme_minimal()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, 1 / s)) %>%
ggplot(aes(x = 1 / s, y = Region)) +
stat_pointintervalh() +
theme_minimal()
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, 1 / s)) %>%
ggplot(aes(x = 1 / s, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Curve Flatness')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, s)) %>%
ggplot(aes(x = s, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Curve Flatness')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
ggtitle('Estimated Total Cases')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
ggtitle('Estimated Total Cases Over Whole Couse of Outbreak')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Total Cases Over Whole Couse of Outbreak')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Total Cases Over\nWhole Couse of Outbreak')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, m)) %>%
ggplot(aes(x = m, y = Region)) +
stat_pointintervalh() +
geom_vline(xintercept = 0) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Days Until Inflection')
trace %>%
ungroup() %>%
mutate(PercentRunthrough = 1 / (1 + exp(m / s))) %>%
mutate(Region = fct_reorder(Region, PercentRunthrough)) %>%
ggplot(aes(x = PercentRunthrough, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Percent Runthrough')
trace %>%
ungroup() %>%
mutate(PercentRunthrough = 1 / (1 + exp(m / s))) %>%
mutate(Region = fct_reorder(Region, PercentRunthrough)) %>%
ggplot(aes(x = PercentRunthrough, y = Region)) +
stat_pointintervalh() +
xlim(0, 1) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Percent Runthrough')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Total Cases Over\nWhole Couse of Outbreak')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, s)) %>%
ggplot(aes(x = s, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Curve Flatness')
trace %>%
ungroup() %>%
mutate(PercentRunthrough = 1 / (1 + exp(m / s))) %>%
mutate(Region = fct_reorder(Region, PercentRunthrough)) %>%
ggplot(aes(x = PercentRunthrough, y = Region)) +
stat_pointintervalh() +
xlim(0, 1) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Percent Runthrough')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, s)) %>%
ggplot(aes(x = s, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Curve Flatness')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Total Cases Over\nWhole Couse of Outbreak')
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
scale_x_log10() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Total Cases Over\nWhole Couse of Outbreak')
total_cases <-
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, A)) %>%
ggplot(aes(x = A, y = Region)) +
stat_pointintervalh() +
scale_x_log10() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Total Cases Over\nWhole Couse of Outbreak')
flatness <-
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, s)) %>%
ggplot(aes(x = s, y = Region)) +
stat_pointintervalh() +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Curve Flatness')
inflection <-
trace %>%
ungroup() %>%
mutate(Region = fct_reorder(Region, m)) %>%
ggplot(aes(x = m, y = Region)) +
stat_pointintervalh() +
geom_vline(xintercept = 0) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Estimated Days Until Inflection')
runthrough <-
trace %>%
ungroup() %>%
mutate(PercentRunthrough = 1 / (1 + exp(m / s))) %>%
mutate(Region = fct_reorder(Region, PercentRunthrough)) %>%
ggplot(aes(x = PercentRunthrough, y = Region)) +
stat_pointintervalh() +
xlim(0, 1) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Percent Runthrough')
inflection + runthrough + total_cases + flatness
inflection + runthrough + total_cases + flatness + plot_layout(nrow = 1)
runthrough <-
trace %>%
ungroup() %>%
mutate(PercentRunthrough = 1 / (1 + exp(m / s))) %>%
mutate(Region = fct_reorder(Region, -PercentRunthrough)) %>%
ggplot(aes(x = PercentRunthrough, y = Region)) +
stat_pointintervalh() +
xlim(0, 1) +
theme_minimal() +
theme(aspect.ratio = 2) +
ggtitle('Percent Runthrough')
inflection + runthrough + total_cases + flatness + plot_layout(nrow = 1)
inflection + total_cases + flatness + plot_layout(nrow = 1)
source('C:/Users/carte/Desktop/covid19/hierarchical_cumulative_cases_model.R', echo=TRUE)
get_covid_data <- function() {
content_url <-
'http://en.wikipedia.org/wiki/Template:2019-20_coronavirus_pandemic_data/United_States_medical_cases'
content <-
read_html(content_url)
counts_raw <-
content %>%
html_nodes('table') %>%
.[1] %>%
html_table(fill = TRUE, header = FALSE) %>%
as.data.frame()
colnames(counts_raw) <-
counts_raw[2,]
counts_raw <-
counts_raw[-1:-2,-ncol(counts_raw):-(ncol(counts_raw) - 6)]
counts <-
counts_raw %>%
filter(nchar(Date) <= 10) %>%
mutate(
Date = mdy(paste(Date, ', 2020'))
) %>%
drop_na(Date) %>%
pivot_longer(AK:PR, names_to = 'Region', values_to = 'n') %>%
mutate(
n = as.numeric(n),
n = replace_na(n, 0)
)
return(counts)
}
covid_data <-
get_covid_data()
covid_data %>%
arrange(Date) %>%
group_by(Region) %>%
mutate(cumu_n = cumsum(n)) %>%
ungroup() %>%
ggplot() +
geom_path(aes(x = cumu_n, y = n, group = Region)) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~ Region) +
theme_minimal()
library(tidybayes)
library(rvest)
library(tidyverse)
library(lubridate)
phase_space_model <-
stan_model('stan/phase_space_model.stan')
get_covid_data <- function() {
content_url <-
'http://en.wikipedia.org/wiki/Template:2019-20_coronavirus_pandemic_data/United_States_medical_cases'
content <-
read_html(content_url)
counts_raw <-
content %>%
html_nodes('table') %>%
.[1] %>%
html_table(fill = TRUE, header = FALSE) %>%
as.data.frame()
colnames(counts_raw) <-
counts_raw[2,]
counts_raw <-
counts_raw[-1:-2,-ncol(counts_raw):-(ncol(counts_raw) - 6)]
counts <-
counts_raw %>%
filter(nchar(Date) <= 10) %>%
mutate(
Date = mdy(paste(Date, ', 2020'))
) %>%
drop_na(Date) %>%
pivot_longer(AK:PR, names_to = 'Region', values_to = 'n') %>%
mutate(
n = as.numeric(n),
n = replace_na(n, 0)
)
return(counts)
}
covid_data <-
get_covid_data()
covid_data %>%
arrange(Date) %>%
group_by(Region) %>%
mutate(cumu_n = cumsum(n)) %>%
ungroup() %>%
ggplot() +
geom_path(aes(x = cumu_n, y = n, group = Region)) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(~ Region) +
theme_minimal()
rstan:::rstudio_stanc("stan/phase_space_model.stan")
rstan:::rstudio_stanc("stan/phase_space_model.stan")
rstan:::rstudio_stanc("stan/phase_space_model.stan")
rstan:::rstudio_stanc("stan/phase_space_model.stan")
source('C:/Users/carte/Desktop/covid19/phase_space_model.R', echo=TRUE)
trace$inv_A
source('C:/Users/carte/Desktop/covid19/phase_space_model.R', echo=TRUE)
